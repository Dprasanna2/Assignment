using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Text.RegularExpressions;

namespace assignment3
{
    class Program
    {
        
        public enum Operation
        {
            FILE_HANDLING = 1, Generics = 2, CUSTOM_EXCEPTION = 3, EXIT = 4
        }
        public enum FileOperaion
        {
            CREATE = 1, READ = 2, WRITE = 3, EXIT = 4
        }
        public enum GenericOperation
        {
            ADD = 1, REMOVE = 2, DISPLAY = 3, EXIT = 4
        }
        public enum Display
        {
            INTEGER_LIST=1,STRING_LIST=2
        }
        static void Main()
        {
            File_Handling fh = new File_Handling();
            string result;
            do
            {
                Console.Clear();
                Console.WriteLine("\n 1.FILE_HANDLING \n 2.Generics \n 3.CUSTOM_EXCEPTION - {MULTILEVEL INHERITANCE} \n 4.EXIT \n ----------------------------------------------");
                main_choice:
                Console.WriteLine("\nENTER THE CHOICE YOU WANT");
                    Enum.TryParse<Operation>(Console.ReadLine().ToUpper(), out var operation);
                    switch (operation)
                    {
                        case Operation.FILE_HANDLING:
                            string output;
                            do
                        {
                            Console.Clear();
                            Console.WriteLine("\n 1.CREATE \n 2.READ \n 3.WRITE \n 4.EXIT \n ----------------------------------------------");
                            file_handling:
                            Console.WriteLine("\nENTER THE CHOICE YOU WANT");
                            Enum.TryParse<FileOperaion>(Console.ReadLine().ToUpper(), out var Fp);
                                switch (Fp)
                                { 
                                    case FileOperaion.CREATE:
                                        fh.FileCreate();
                                    break;
                                    case FileOperaion.READ:
                                        fh.FileRead();
                                        break;
                                    case FileOperaion.WRITE:
                                        fh.FileWrite();
                                        break;
                                    case FileOperaion.EXIT:
                                        System.Environment.Exit(0);
                                        break;
                                    default:
                                    Console.ForegroundColor = ConsoleColor.Red;
                                    Console.WriteLine("Invalid Choice Please enter valid choice!!! ");
                                    Console.ResetColor();
                                    goto file_handling;
                                }
                            again:
                                try
                                {
                                    Console.WriteLine("\nDO YOU WANT TO CONTINUE THE FILE HANDLING PROCESS YES/NO ?");
                                    output = Console.ReadLine().ToUpper();
                                    if (output != "YES" && output != "Y" && output != "NO" && output != "N")
                                    {
                                    Console.ForegroundColor = ConsoleColor.Red;
                                    Console.WriteLine("ERROR => ENTER VALID INPUT:");
                                    Console.ResetColor();
                                }
                                }
                                catch (invalid_input s)
                                {
                                    Console.WriteLine(s.Message);
                                    goto again;
                                }
                            }
                            while (output == "YES" || output == "Y");
                            break;
                        case Operation.Generics:
                            string output1;
                           string input_string;
                 
                            Generics gc = new Generics();
                            do
                            {
                            Console.Clear();
                            Console.WriteLine(" 1.ADD \n 2.REMOVE \n 3.DISPLAY \n 4.EXIT \n -------------------------------- \n ENTER THE CHOICE YOU WANT ");
                            generics:
                            Console.WriteLine("\nENTER THE CHOICE YOU WANT ");
                                Enum.TryParse<GenericOperation>(Console.ReadLine().ToUpper(), out var Gp);
                            switch (Gp)
                                {
                                    case GenericOperation.ADD:
                                go:
                                    do
                                    {
                                        Console.WriteLine("Enter the value to add in the list");
                                        try
                                        {
                                            input_string = Console.ReadLine();
                                            if (string.IsNullOrWhiteSpace(input_string))
                                            {
                                                throw new invalid_input("ERROR => THE INPUT SHOULD BE NOT BE EMPTY");
                                            }
                                            else if ((input_string).ToLower() == "null")
                                            {
                                                Console.WriteLine("ERROR => THE INPUT SHOULD BE NOT BE NULL");
                                            }
                                            else
                                            {
                                                if (int.TryParse(input_string, out int v))
                                                {
                                                    int val = Convert.ToInt32(input_string);
                                                    gc.ADDITION<int>(val);
                                                }
                                                else
                                                {
                                                    gc.ADDITION<string>(input_string);
                                                }
                                            }
                                        }
                                        catch (invalid_input e1)
                                        {
                                            Console.WriteLine(e1.Message);
                                            goto go;
                                        }
                                    choose_add:
                                        try
                                        {
                                            Console.WriteLine("\nDO YOU WANT TO CONTINUE THE ADDITION PROCESS ? YES/NO");
                                            result = Console.ReadLine().ToUpper();
                                            if (result != "YES" && result != "Y" && result != "NO" && result != "N")
                                            {
                                                Console.WriteLine("ERROR => ENTER VALID INPUT:");
                                            }
                                        }
                                        catch (invalid_input s)
                                        {
                                            Console.WriteLine(s.Message);
                                            goto choose_add;
                                        }
                                    }
                                    while (result == "YES" || result == "Y");
                                    break;



                                     case GenericOperation.REMOVE:
                                    do
                                        {
                                            Console.WriteLine("Enter the  value to remove in the list");
                                            input_string = Console.ReadLine();
                                            if (int.TryParse(input_string, out int a))
                                            {
                                                gc.REMOVE<int>(a);
                                            }
                                            else
                                            {
                                                gc.REMOVE<string>(input_string);
                                            }
                                        choose_remove:
                                            try
                                            {
                                                Console.WriteLine("\nDO YOU WANT TO CONTINUE THE REMOVE PROCESS ? YES/NO");
                                                result = Console.ReadLine().ToUpper();
                                                if (result != "YES" && result != "Y" && result != "NO" && result != "N")
                                                {
                                                Console.WriteLine("ERROR => ENTER VALID INPUT:");
                                                }
                                            }
                                            catch (invalid_input s)
                                            {
                                                Console.WriteLine(s.Message);
                                                goto choose_remove;
                                            }
                                    }
                                        while (result == "YES" || result == "Y");
                                        break;




                                    case GenericOperation.DISPLAY:
                                 
                                    Console.WriteLine(" 1.INTEGER LIST \n 2.STRING LIST \n ---------------------------------------------- \n ENTER THE CHOICE YOU WANT");
                                        Enum.TryParse<Display>(Console.ReadLine().ToUpper(), out var GCL);
                                        switch (GCL)
                                        {
                                            case Display.INTEGER_LIST:
                                                gc.DISPLAY_INT();
                                                break;
                                            case Display.STRING_LIST:
                                                gc.DISPLAY_STRING();
                                                break;
                                            default:
                                                Console.WriteLine("Invalid Choice Please enter proper value!!!!");
                                                break;
                                        }
                                        break;



                                    case GenericOperation.EXIT:
                                        System.Environment.Exit(0);
                                        break;
                                    default:
                                        Console.WriteLine("Invalid Choice Please enter valid choice!!! ");
                                    goto generics;
                                }
                            again1:
                                try
                                {
                                    Console.WriteLine("\nDO YOU WANT TO CONTINUE THE GENERIC PROCESS ? YES/NO");
                                    output1 = Console.ReadLine().ToUpper();
                                    if (output1 != "YES" && output1 != "Y" && output1 != "NO" && output1 != "N")
                                    {
                                    Console.WriteLine("ERROR => ENTER VALID INPUT:");
                                    }
                                }
                                catch (invalid_input s)
                                {
                                    Console.WriteLine(s.Message);
                                    goto again1;
                                }
                            }
                            while (output1 == "YES" || output1 == "Y");
                            break;
                        case Operation.CUSTOM_EXCEPTION:
                            Percentage P = new Percentage();
                            P.Getname();
                            P.GetMark();
                            P.GetPercent();
                            break;
                        case Operation.EXIT:
                            System.Environment.Exit(0);
                            break;
                        default:
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.WriteLine("Invalid Choice Please enter valid choice!!! ");
                        Console.ResetColor();
                        goto main_choice;
                    }
            top:
                try
                {
                    Console.WriteLine("\nDO YOU WANT TO CONTINUE THE MAIN PROCESS YES/NO ?");
                    result = Console.ReadLine().ToUpper();
                    if (result != "YES" && result != "Y" && result != "NO" && result != "N")
                    {
                        Console.WriteLine("ERROR => ENTER VALID INPUT:");
                    }
                }
                catch (invalid_input s)
                {
                    Console.WriteLine(s.Message);
                    goto top;
                }
            }
            while ((result == "YES" || result == "Y"));
        }
    }
    public class invalid_input : Exception
    {
        public invalid_input() : base()
        { }
        public invalid_input(string message) : base(message)
        { }
    }
    class File_Handling
    {
        string str;
        public void FileCreate()
        {
            Regex rg = new Regex(@"^([\w-._@%`#$&()])+(.txt)$");
            string path = Path.GetDirectoryName(Path.GetDirectoryName(Directory.GetCurrentDirectory())) + @"\file_creation\";
            Console.WriteLine(Path.GetDirectoryName(Path.GetDirectoryName(Directory.GetCurrentDirectory())));
            Directory.CreateDirectory(path+@"\file_creation\");
        retry:
            try
            {
                Console.WriteLine("The Filename should not contain  [/\\:*?<>] ");
                Console.WriteLine("ENTER THE FILENAME (please use .txt extension) :\n");
                string file_name = Console.ReadLine();
                if (string.IsNullOrWhiteSpace(file_name))
                {
                    throw new invalid_input("ERROR => THE FILE NAME SHOULD BE NOT BE EMPTY");
                }
                else if (!rg.IsMatch(file_name))
                {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("ERROR => PLEASE ENTER THE FILE NAME IN PROPER FORMAT");
                    Console.ResetColor();
                }
                else if (File.Exists(path + file_name))
                {
                    Console.ForegroundColor = ConsoleColor.Green;
                    Console.WriteLine("This file already exists:");
                    Console.ResetColor();
                }
                else
                {
                    FileStream f = new FileStream(path + file_name, FileMode.Create);
                    Console.ForegroundColor = ConsoleColor.Green;
                    Console.WriteLine("File created");
                    Console.ResetColor();
                    StreamWriter s = new StreamWriter(f);
                    s.Close();
                    f.Close();
                }
            }
            catch (invalid_input e1)
            {
                Console.WriteLine(e1.Message);
                goto retry;
            }
        }
        public void FileWrite()
        {
            string path = Path.GetDirectoryName(Path.GetDirectoryName(Directory.GetCurrentDirectory())) + @"\file_creation\";
            writeagain:
            try
            {
                Console.WriteLine("Enter the file name you have to write:");
                string file_name = Console.ReadLine();
                if (string.IsNullOrEmpty(file_name))
                {
                    throw new invalid_input("THE FILE NAME SHOULD NOT BE EMPTY");
                }
                if (File.Exists(path + file_name))
                {
                    Console.WriteLine("Enter the text (Enter *q if you want to exit typing)\n");
                    do
                    {
                        str = Console.ReadLine();
                        if (str == "*q")
                        {
                            break;
                        }
                        TextWriter writer = File.AppendText(path + file_name);
                        writer.WriteLine(str);
                        writer.Close();
                    }
                    while (!str.Equals("*q"));
                }
                else
                {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("File not exits please first create file:");
                    Console.ResetColor();
                }
            }
            catch (invalid_input w)
            {
                Console.WriteLine(w.Message);
                goto writeagain;
            }
        }
        public void FileRead()
        {
            string path = Path.GetDirectoryName(Path.GetDirectoryName(Directory.GetCurrentDirectory())) + @"\file_creation\";
            readagain:
            try
            {
                Console.WriteLine("Enter the file name you have to read:");
               string file_name = Console.ReadLine();
                if (string.IsNullOrEmpty(file_name))
                {
                    throw new invalid_input("THE FILE NAME SHOULD NOT BE EMPTY");
                }
           
            if (File.Exists(path+ file_name))
            {
                TextReader reader = File.OpenText(path + file_name);
                string data = reader.ReadToEnd();
                Console.WriteLine("THE DATA PRESENT IS : {0} \n ", data);
                reader.Close();
            }
            else
            {
                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.WriteLine("File not exits please first create file:");
                Console.ResetColor();
            }
            }
            catch (invalid_input r)
            {
                Console.WriteLine(r.Message);
                goto readagain;
            }
        }
    }
    public class Student
    {
        public string Name;
        Regex rg = new Regex(@"^[a-zA-Z]+$");
        public void Getname()
        {
        retry:
            try
            {
                Console.WriteLine("Enter the Name:\n");
                Name = Console.ReadLine();
                if (string.IsNullOrWhiteSpace(Name))
                {
                    throw new invalid_input("ERROR => THE NAME SHOULD BE NOT BE EMPTY");
                }
                if ((Name).ToLower() == "null")
                {
                    throw new invalid_input("ERROR => THE INPUT SHOULD BE NOT BE NULL");
                }
                //if (int.TryParse(Name, out int res))
                //{
                //    throw new invalid_input("ERROR => DON'T ENTER NUMBER");
                //}
                if (!rg.IsMatch(Name))
                {
                    throw new invalid_input("ERROR => PLEASE ENTER PROPER NAME");
                }
            }
            catch (invalid_input e1)
            {
                Console.WriteLine(e1.Message);
                goto retry;
            }
        }
    }
    public class Marks : Student
    {
        public string marks;
        public int num;
        Regex rr = new Regex("^[0-9]{1,2}$");
        public void GetMark()
        {
        retrymarks:
            try
            {
                Console.WriteLine("Enter the marks of the subject:\n");
                marks = Console.ReadLine();
                if (!rr.IsMatch(marks))
                {
                    throw new invalid_input("ERROR => PLEASE ENTER VALID INPUT");
                }
                if (string.IsNullOrWhiteSpace(marks))
                {
                    throw new invalid_input("ERROR => THE FILE NAME SHOULD BE NOT BE EMPTY");
                }
                else
                {
                    num = Convert.ToInt32(marks);
                }
            }
            catch (invalid_input n)
            {
                Console.WriteLine(n.Message);
                goto retrymarks;
            }
        }
    }
    public class Percentage : Marks
    {
        public int percent;
        public void GetPercent()
        {
            Console.WriteLine("THE STUDENT NAME IS:" + Name.ToUpper());
            Console.WriteLine("THE MARKS ARE " + num);
            percent = (num * 100) / 100;
            Console.WriteLine("The percentage of the student is:" + percent + "%");
        }
    }
    public class Generics
    {
        List<int> num = new List<int>();
        List<string> name = new List<string>();
        public void ADDITION<A>(A val)
        {
            if (val.GetType() == typeof(int))
            {
                var a = Convert.ToInt32(val);
                num.Count();
                //Console.WriteLine(num.Count());
                num.Add(a);
                Console.ForegroundColor = ConsoleColor.Green;
                Console.WriteLine("THE VALUE IS ENTERED IN THE INTEGER LSIT");
                Console.ResetColor();
            }
            else
            {
                var b = val.ToString();
                name.Count();
                //Console.WriteLine(name.Count());
                name.Add(b);
                Console.ForegroundColor = ConsoleColor.Green;
                Console.WriteLine("THE VALUE IS ENTERED IN THE STRING LSIT");
                Console.ResetColor();
            }
        }
           public void REMOVE<R>(R val)
        {
            if (val.GetType() == typeof(int))
            {
                var a1 = Convert.ToInt32(val);
                if (num.Contains(a1))
                {
                    num.Remove(a1);
                    Console.ForegroundColor = ConsoleColor.Green;
                    Console.WriteLine("ITEM REMOVED SUCCESSFULLY FROM INTEGER LIST!!\n");
                    Console.ResetColor();
                }
                else
                {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("Value does not exist\n");
                    Console.ResetColor();
                }
            }
            else
            {
                var b1 = val.ToString();
                if (name.Contains(b1))
                {
                    name.Remove(b1);
                    Console.ForegroundColor = ConsoleColor.Green;
                    Console.WriteLine("ITEM REMOVED SUCCESSFULLY FROM STRING LIST!!\n");
                    Console.ResetColor();
                }
                else
                {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("Value does not exist\n");
                    Console.ResetColor();
                }
            }
        }
        public void DISPLAY_INT()
        {
            if (num.Count() == 0)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine("ERROR => INTEGER LIST IS EMPTY NO ELEMENT TO DISPLAY");
                Console.ResetColor();
            }
            else
            {
                Console.WriteLine("the element in the interger lsit are:");
                foreach (int n in num)
                {
                    Console.Write(n+"  ");
                }
            }
        }
        public void DISPLAY_STRING()
        {
            if (name.Count() == 0)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine("ERROR => STRING LIST IS EMPTY NO ELEMENT TO DISPLAY");
                Console.ResetColor();
            }
            else
            {
                Console.WriteLine("\nthe element in the string lsit are:");
                foreach (string s in name)
                {
                    Console.Write(s+"  ");
                }
            }
        }
    }

}
